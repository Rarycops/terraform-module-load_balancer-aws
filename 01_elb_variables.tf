variable "elb_listener_map" {
  description = "A list of listener blocks."
  type = map(object({
    instance_port     = number
    instance_protocol = string
    lb_port           = number
    lb_protocol       = string
  }))
  default = null
  validation {
    condition     = (var.load_balancer_type == "elb" && var.elb_listener_map != null) || var.elb_listener_map == null
    error_message = "If load_balancer_type is set to elb elb_listener_map should be set"
  }
}

variable "elb_name" {
  description = "The name of the ELB. By default generated by Terraform."
  type        = string
  default     = null
  validation {
    condition     = (var.load_balancer_type == "elb" && var.elb_name != null) || var.elb_name == null
    error_message = "If load_balancer_type is set to elb elb_name should be set"
  }
}

variable "elb_access_logs_bucket" {
  description = "The S3 bucket name to store the logs in."
  type        = string
  default     = null
}

variable "elb_access_logs_bucket_prefix" {
  description = "The S3 bucket prefix. Logs are stored in the root if not configured."
  type        = string
  default     = null
  validation {
    condition     = (var.elb_access_logs_bucket != null && var.elb_access_logs_bucket_prefix != null) || var.elb_access_logs_bucket_prefix == null
    error_message = "elb_access_logs_bucket must be set for this variable to be used"
  }
}

variable "elb_access_logs_interval" {
  description = "The publishing interval in minutes. Valid values: 5 and 60."
  type        = number
  default     = 60
  validation {
    condition     = (var.elb_access_logs_bucket != null && (var.elb_access_logs_interval != 60 || var.elb_access_logs_interval == 60)) || var.elb_access_logs_interval == 60
    error_message = "elb_access_logs_bucket must be set for this variable to be used"
  }
}

variable "elb_access_logs_enabled" {
  description = "Boolean to enable / disable access_logs."
  type        = bool
  default     = true
  validation {
    condition     = (var.elb_access_logs_bucket != null && (var.elb_access_logs_enabled == true || var.elb_access_logs_enabled == false)) || var.elb_access_logs_enabled == true
    error_message = "elb_access_logs_bucket must be set for this variable to be used"
  }
}

variable "elb_availability_zones" {
  description = "(Required for an EC2-classic ELB) The AZ's to serve traffic in."
  type        = list(string)
  default     = null
}

variable "elb_security_groups" {
  description = "A list of security group IDs to assign to the ELB."
  type        = list(string)
  default     = null
  validation {
    condition     = (var.elb_security_groups != null && var.elb_subnets != null) || var.elb_security_groups == null
    error_message = "elb_security_groups is only valid if creating an ELB within a VPC"
  }
}

variable "elb_subnets" {
  description = "(Required for a VPC ELB) A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource."
  type        = list(string)
  default     = null
  validation {
    condition     = (var.elb_availability_zones == null && var.elb_subnets != null) || var.elb_subnets == null
    error_message = "Exactly one of availability_zones or subnets must be specified: this determines if the ELB exists in a VPC or in EC2-classic."
  }
}

variable "elb_istances" {
  description = "A list of instance ids to place in the ELB pool."
  type        = list(string)
  default     = null
}

variable "elb_internal" {
  description = "If true, ELB will be an internal ELB."
  type        = bool
  default     = false
}

variable "elb_health_check_healthy_threshold" {
  description = "The number of checks before the instance is declared healthy."
  type        = number
  default     = null
}

variable "elb_health_check_interval" {
  description = "The interval between checks."
  type        = number
  default     = null
}

variable "elb_health_check_target" {
  description = "The target of the check."
  type        = number
  default     = null
  validation {
    condition     = can(regex("^(HTTP|HTTPS):\\d{1,5}/.*|^(TCP|SSL):\\d{1,5}$", var.elb_health_check_target)) || var.elb_health_check_target == null
    error_message = "The target must follow the pattern '{PROTOCOL}:{PORT}{PATH}', where PROTOCOL is HTTP, HTTPS, TCP, or SSL. For HTTP and HTTPS, PORT and PATH are required. For TCP and SSL, only PORT is required and PATH is not supported."
  }
}

variable "elb_health_check_unhealthy_threshold" {
  description = "The number of checks before the instance is declared unhealthy."
  type        = number
  default     = null
}

variable "elb_health_check_timeout" {
  description = "The length of time before the check times out."
  type        = number
  default     = null
}

variable "elb_cross_zone_load_balancing" {
  description = "Enable cross-zone load balancing."
  type        = bool
  default     = true
}

variable "elb_idle_timeout" {
  description = "The time in seconds that the connection is allowed to be idle."
  type        = number
  default     = 60
}

variable "elb_connection_draining" {
  description = "Boolean to enable connection draining. "
  type        = bool
  default     = false
}

variable "elb_connection_draining_timeout" {
  description = "The time in seconds to allow for connections to drain."
  type        = number
  default     = 300
}

variable "elb_desync_mitigation_mode" {
  description = "Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. "
  type        = string
  default     = "defensive"
  validation {
    condition = can(
      regex(
        "^defensive|monitor|strictest$",
        var.elb_desync_mitigation_mode
      )
    )
    error_message = "Valid values are monitor, defensive, strictest."
  }
}

variable "elb_tags" {
  description = "ELB tags provided"
  type        = map(string)
  default     = {}
}
